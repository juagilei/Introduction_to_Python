# Vamos a desplegar un contrato desde python sin necesidad de de desplegarlo desde remix
# aunque si que tenemos que compilarlo desde remix para obtener el ABI y el BYTECODE que ahora veremos que es.
# Practicamente va a ser todo igual con unas pequeñas variaciones

# Empezamos concectandonos a ganache y comprobando la conexión e importsndo las librerias

import json
from web3 import Web3

# Set up web3 connection with Ganache
ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))

# Conecta a ganache
# if para ver si no esta conectado a ganache
print()
if not web3.is_connected():
    print("Error: No se pudo conectar a la red Ethereum.")
# El comando exit lo que hace es salir se del programa directamente
    exit()
else:
    
    print("Conexion realizada")

# Para encontrar el Abi del contrato inteligente busco en remix el contrato en este caso saludo_y_modificar y lo compilo.
# En la pestaña compilation details despliego en WEB3DEPLOY y copio el ABI solomlo que esta con los []

abi=json.loads('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getGreeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_newGreeting","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]')

# ahora busco el BYTECODE en el mismo desplegable WEB3DEPLOY en este caso copiamos lo que ponga en "data"

bytecode="0x60806040523480156200001157600080fd5b506040518060400160405280600581526020017f48656c6c6f00000000000000000000000000000000000000000000000000000081525060009081620000589190620002d9565b50620003c0565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620000e157607f821691505b602082108103620000f757620000f662000099565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000122565b6200016d868362000122565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001ba620001b4620001ae8462000185565b6200018f565b62000185565b9050919050565b6000819050919050565b620001d68362000199565b620001ee620001e582620001c1565b8484546200012f565b825550505050565b600090565b62000205620001f6565b62000212818484620001cb565b505050565b5b818110156200023a576200022e600082620001fb565b60018101905062000218565b5050565b601f82111562000289576200025381620000fd565b6200025e8462000112565b810160208510156200026e578190505b620002866200027d8562000112565b83018262000217565b50505b505050565b600082821c905092915050565b6000620002ae600019846008026200028e565b1980831691505092915050565b6000620002c983836200029b565b9150826002028217905092915050565b620002e4826200005f565b67ffffffffffffffff8111156200030057620002ff6200006a565b5b6200030c8254620000c8565b620003198282856200023e565b600060209050601f8311600181146200035157600084156200033c578287015190505b620003488582620002bb565b865550620003b8565b601f1984166200036186620000fd565b60005b828110156200038b5784890151825560018201915060208501945060208101905062000364565b86831015620003ab5784890151620003a7601f8916826200029b565b8355505b6001600288020188555050505b505050505050565b61073380620003d06000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063ef690cc014610062578063fe50cc7214610080575b600080fd5b610060600480360381019061005b919061032b565b61009e565b005b61006a6100b1565b60405161007791906103f3565b60405180910390f35b61008861013f565b60405161009591906103f3565b60405180910390f35b80600090816100ad919061062b565b5050565b600080546100be90610444565b80601f01602080910402602001604051908101604052809291908181526020018280546100ea90610444565b80156101375780601f1061010c57610100808354040283529160200191610137565b820191906000526020600020905b81548152906001019060200180831161011a57829003601f168201915b505050505081565b60606000805461014e90610444565b80601f016020809104026020016040519081016040528092919081815260200182805461017a90610444565b80156101c75780601f1061019c576101008083540402835291602001916101c7565b820191906000526020600020905b8154815290600101906020018083116101aa57829003601f168201915b5050505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610238826101ef565b810181811067ffffffffffffffff8211171561025757610256610200565b5b80604052505050565b600061026a6101d1565b9050610276828261022f565b919050565b600067ffffffffffffffff82111561029657610295610200565b5b61029f826101ef565b9050602081019050919050565b82818337600083830152505050565b60006102ce6102c98461027b565b610260565b9050828152602081018484840111156102ea576102e96101ea565b5b6102f58482856102ac565b509392505050565b600082601f830112610312576103116101e5565b5b81356103228482602086016102bb565b91505092915050565b600060208284031215610341576103406101db565b5b600082013567ffffffffffffffff81111561035f5761035e6101e0565b5b61036b848285016102fd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103ae578082015181840152602081019050610393565b60008484015250505050565b60006103c582610374565b6103cf818561037f565b93506103df818560208601610390565b6103e8816101ef565b840191505092915050565b6000602082019050818103600083015261040d81846103ba565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061045c57607f821691505b60208210810361046f5761046e610415565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261049a565b6104e1868361049a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061052861052361051e846104f9565b610503565b6104f9565b9050919050565b6000819050919050565b6105428361050d565b61055661054e8261052f565b8484546104a7565b825550505050565b600090565b61056b61055e565b610576818484610539565b505050565b5b8181101561059a5761058f600082610563565b60018101905061057c565b5050565b601f8211156105df576105b081610475565b6105b98461048a565b810160208510156105c8578190505b6105dc6105d48561048a565b83018261057b565b50505b505050565b600082821c905092915050565b6000610602600019846008026105e4565b1980831691505092915050565b600061061b83836105f1565b9150826002028217905092915050565b61063482610374565b67ffffffffffffffff81111561064d5761064c610200565b5b6106578254610444565b61066282828561059e565b600060209050601f8311600181146106955760008415610683578287015190505b61068d858261060f565b8655506106f5565b601f1984166106a386610475565b60005b828110156106cb578489015182556001820191506020850194506020810190506106a6565b868310156106e857848901516106e4601f8916826105f1565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220fc2a64bc6e4f1de8a8cc6204a9986fd923c39018081204d9eedf26fa3163ff3764736f6c63430008120033"

# indicamos la cuenta remitente con se nos cobra el gas para desplegar el contrato, en este caso de ganache
# indicamos el index [0] que es  el index de la primera cuenta

web3.eth.defaultAccount = web3.eth.accounts[0]

# Instanciamos y desplegamos el contrato usando el abi y bytecode introduciendolo en una variable

Greeter = web3.eth.contract(abi=abi, bytecode=bytecode)

# Crear la transacción para desplegar el contrato

transaction = Greeter.constructor().build_transaction({
    # from es la cuenta donde se va a cobrar la transaccion
    'from': web3.eth.defaultAccount,
    'gas': 4000000,
    # nonce se usa para que la transaccion sea únia y no se pueda repetir el mismomnumero de transaccion
    'nonce': web3.eth.get_transaction_count(web3.eth.defaultAccount),
})

# Se firma y envia la tranascción, para lo cual debemos conocer la key de la cuenta donde nos cobran

signed_txn = web3.eth.account.sign_transaction(transaction, private_key='0x74452261cb56cb5ed1e78577b6d9a309914d950835d2cd137db60c03c46f81f2')
tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)

# Esperamos a que la transacción sea minada
tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

# Crear la instancia del contrato con la dirección recién desplegada
contract = web3.eth.contract(
    address=tx_receipt.contractAddress,
    abi=abi,
)
print()

# mostramos la dirección de despliegue del contrato

print("Dirección del contrato:", tx_receipt.contractAddress)
print()

# Mostrar el saludo predeterminado del contrato, por lo que  llamamos a la  función getGreeting del contrato

print('Saludo predeterminado del contrato: ', contract.functions.getGreeting().call())
print()

# Actulizamos el saludo llamado a la función setGreeting del contrato

transaction = contract.functions.setGreeting('¡HOLA A TODOS BLOCKMAKERS!').build_transaction({
    'from': web3.eth.defaultAccount,
    'gas': 4000000,
    'nonce': web3.eth.get_transaction_count(web3.eth.defaultAccount),
})

# Se firma y envia la tranascción, para lo cual debemos conocer la key de la cuenta donde nos cobran

signed_txn = web3.eth.account.sign_transaction(transaction, private_key='0x74452261cb56cb5ed1e78577b6d9a309914d950835d2cd137db60c03c46f81f2')
tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)

# Esperar a que la transacción sea minada
web3.eth.wait_for_transaction_receipt(tx_hash)

# Mostrar el nuevo valor del saludo
print('Saludo actualizado del contrato: ', contract.functions.getGreeting().call())
print()
